generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserRoles {
  USER
  ADMIN
}

enum EntityTypes {
  CAMPGROUND
  USER
  EQUIPMENT
  THREAD 
}

enum NotificationTypes {
  TYPE1
  TYPE2
}



model User {
  firebaseId String   @id
  lastName   String   @default("")
  userName   String
  email      String   @unique
  role       UserRoles @default(USER) 
  address    String
  image      String
  trips      Trip[]
  cart       Cart[]
  wishlist   Wishlist[]
  profile    Profile?
  chat     Chat?     @relation(fields: [chatId], references: [id])
  chatId   Int?
  sentMessages Message[] @relation("SentMessages") 
  threads  Thread[]
   comments Comment[]
   reactions Reaction[]
    image       String   @default("https://images.unsplash.com/photo-1633332755192-727a05c4013d?auto=format&fit=crop&q=80&w=1000&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxzZWFyY2h8Mnx8dXNlcnxlbnwwfHwwfHx8MA%3D%3D")

}

model Trip {
  id       Int        @id @default(autoincrement())
  location String
  duration String
  rating   Float
  text     String
  date     DateTime
  userId   String
  user     User       @relation(fields: [userId], references: [firebaseId])
  images   Image[]
  wishlist Wishlist[]
  carts    Cart[]
}

model Image {
  id         Int        @id @default(autoincrement())
  imageId    String
  entityType EntityTypes
  entityId   String
  tripId     Int?
  trip       Trip?      @relation(fields: [tripId], references: [id])
  threadId   Int?       // Added this line
  thread     Thread?    @relation(fields: [threadId], references: [id])  // And this line
}

model Wishlist {
  userId String
  tripId Int
  user   User   @relation(fields: [userId], references: [firebaseId])
  trip   Trip   @relation(fields: [tripId], references: [id])

  @@id([userId, tripId])
}

model Cart {
  userId String
  tripId Int
  user   User   @relation(fields: [userId], references: [firebaseId])
  trip   Trip   @relation(fields: [tripId], references: [id])

  @@id([userId, tripId])
}

model Notification {
  id   Int              @id @default(autoincrement())
  type NotificationTypes
  time DateTime
}

model Profile {
  userId String @id @unique
  user   User   @relation(fields: [userId], references: [firebaseId])
}

model Chat {
  id          Int      @id @default(autoincrement())
  participants User[]   
  messages    Message[]
}

model Message {
  id       Int      @id @default(autoincrement())
  content  String
  senderId String   
  chat     Chat     @relation(fields: [chatId], references: [id])
  chatId   Int
  sender   User     @relation("SentMessages", fields: [senderId], references: [firebaseId]) 
}

model Thread {
  id         Int       @id @default(autoincrement())
  title      String
  content    String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  authorId   String
  author     User      @relation(fields: [authorId], references: [firebaseId])
  comments   Comment[]
  images     Image[]   
  imagePath String?   @db.LongText
  reactions Reaction[]
}



model Comment {
  id         Int       @id @default(autoincrement())
  content    String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  threadId   Int
  thread     Thread    @relation(fields: [threadId], references: [id])
  authorId   String
  author     User      @relation(fields: [authorId], references: [firebaseId])
}

model Reaction {
  id          Int          @id @default(autoincrement())
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  userId      String
  user        User         @relation(fields: [userId], references: [firebaseId])
  threadId    Int?
  thread      Thread?      @relation(fields: [threadId], references: [id])

  @@index([userId, threadId], name: "reaction_index")
}
